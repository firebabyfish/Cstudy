#include <iostream>
using namespace std;
#include <string>

/********************************************************************************/
////函数的默认参数
//int func(int a, int b = 20, int c = 30)
//{
//	return a + b + c;
//}
////注意事项
////1、如果某个位置已有默认值，那么该位置从左往右往后都必须有默认值
////2、如果函数的声明有默认参数，函数实现就不能有默认参数
//int func(int a = 10);
////int func(int a = 10) //错误
////{
////	return a; //声明和实现中只能有一个有默认参数
////}
//
//int  main()
//{
//	cout << func(10) << endl; //有默认值可以不写形参
//	cout << func(10, 30) << endl; //如果有自己的数据默认选择传入的数据
//	
//	system("pause");
//	return 0;
//}
/********************************************************************************/






/********************************************************************************/
//占位参数
//占位参数可以有默认参数
//int func(int a, int) //占用一个位置
//{
//	cout << a << endl;
//}
//
//int main()
//{
//	func(10, 10); //占位参数必须填补
//
//	system("pause");
//	return 0;
//}
/********************************************************************************/







/********************************************************************************/
//函数重载
//可以让函数名相同，增加复用性
//函数重载的满足条件
//1、同一作用域
//2、函数名相同
//3、参数的类型/个数/顺序不同

//函数重载注意事项
//引用作为重载条件
void func1(int& a) //int &a = 10; 不合法
{
	cout << "func1_&a" << endl;
}
void func1(const int& a) //const int &a = 10; 创建一块临时的10的空间，合法
{
	cout << "c_func1_&a" << endl;
}
//函数重载与默认参数
void func2(int a, int b) //b不能有默认参数,否则无法重载
{
	cout << "int ab" << endl;
}
void func2(int a)
{
	cout << "int a" << endl;
}
int main()
{
	//int a = 10;
	//func1(a); //

	//func1(10);

	func2(10);

	system("pause");
	return 0;
}
/********************************************************************************/